package unionfind;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/*
https://leetcode.com/problems/minimize-malware-spread-ii/description/

You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly
connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of
those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue
until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial),
return such a node with the smallest index.
 */
public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {

        int n = graph.length;
        Set<Integer> malwares = new HashSet<>();
        for (int mal : initial) {
            malwares.add(mal);
        }

        UnionFind uf = new UnionFind(n);

        // union all non-malware nodes
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1 && !malwares.contains(i) && !malwares.contains(j)) {
                    uf.union(i, j);
                }
            }
        }

        // -1 : not infected
        // -2 : infected by more than 1 malwares
        // >= 0 : infected by a malware
        int[] infected = new int[n];
        Arrays.fill(infected, -1);

        for (int mal : malwares) {
            for (int i = 0; i < n; i++) {
                if (mal != i && graph[mal][i] == 1) {
                    int leader = uf.find(i);
                    if (infected[leader] == -1) {
                        infected[leader] = mal;
                    } else if (infected[leader] != -2 && infected[leader] != mal) {
                        infected[leader] = -2;
                    }
                }
            }
        }

        int[] infectedCount = new int[n];
        for (int i = 0; i < n; i++) {
            if (i == uf.find(i) && infected[i] >= 0) {
                infectedCount[infected[i]] += uf.getSize(i);
            }
        }

        Arrays.sort(initial);
        int res = initial[0];
        int max = infectedCount[res];
        for (int i = 0; i < initial.length; i++) {
            if (max < infectedCount[initial[i]]) {
                res = i;
                max = infectedCount[initial[i]];
            }
        }

        return res;
    }

    class UnionFind {
        private int count;
        private int[] parent;
        private int[] size;

        public UnionFind(int n) {
            this.count = n;
            this.parent = new int[n];
            this.size = new int[n];
            for (int i = 0; i < n; i++) {
                this.parent[i] = i;
                this.size[i] = 1;
            }
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        public void union(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);
            if (rootP != rootQ) {
                parent[rootP] = rootQ;
                size[rootQ] += size[rootP];
            }
        }

        public int getSize(int x) {
            return size[find(x)];
        }
    }
}
